type Primitive
name ExcludingBoxes
attribName speed
attribType float
attribName trans
attribType vec2
attribName rotation
attribType float
attribName detail
attribType float
attribName height
attribType float
attribName frequency
attribType float
attribName layers
attribType float
attribName exclusion
attribType float
body 
float tdist = 99999999;
float tfdist = 99999999;
vec3 p = point;

for (int l = 0; l < layers; ++l)
{
	point = p;
	float t = (speed * float(timeSinceLaunch)) * frequency - (l+l/float(int(layers)));
	float tn = (smoothstep(0.5, 0.6, fract(t)) - smoothstep(0.9, 1.0, fract(t))) / frequency;
	t = (int(t) + smoothstep(0.6, 0.9, fract(t))) / frequency;
	float r = rotation * t;
	vec2 tr = trans * t;
	vec2 s = sin(vec2(r - 1.571, r));
	mat3 m = mat3(s.x, -s.y, 0,
				  s.y, s.x, 0,
				  tr.x, tr.y, 1);
	float dist = 99999999;
	float fdist = 99999999;
	for (int i = 0; i < detail; ++i)
	{
		point.xz = (m * vec3(-abs(point.xz), 1)).xy;
		point.xz = fract(point.xz + 0.5f) - 0.5f;
		dist = min(sdBox(point + vec3(0, (tn + rand(vec2(0, i))) * height, 0), vec3(0.2)) - 0.05, dist);
		fdist = min(sdBox(point, vec3(0.2, 1, 0.2)) - exclusion * 0.1, fdist);
	}
	
	float h = clamp( 0.5 - 0.5*(-fdist-tdist)/0.05, 0.0, 1.0 );
    tdist = mix( -fdist, tdist, h ) + 0.05*h*(1.0-h);
	tdist = min(dist, tdist);
	tfdist = min(fdist, tfdist);
}
return tdist;

